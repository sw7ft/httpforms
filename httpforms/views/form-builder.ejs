<div>
  <div class="flex justify-between items-center mb-8">
    <h1 class="text-3xl font-bold text-primary"><%= form.id ? 'Edit Form' : 'Create New Form' %></h1>
    <a href="/dashboard" class="btn-outline">Back to Dashboard</a>
  </div>
  
  <% if (subscription) { %>
    <div class="bg-white rounded-lg shadow-md p-4 mb-8">
      <div class="flex items-center justify-between">
        <div>
          <span class="text-sm text-gray-600">Current Plan:</span>
          <span class="ml-2 font-medium <%= subscription.planType === 'premium' ? 'text-accent' : 'text-primary' %>">
            <%= subscription.planType === 'premium' ? 'Premium' : 'Basic' %> Plan
          </span>
          <% if (subscription.planType === 'premium') { %>
            <span class="ml-2 bg-accent text-primary text-xs px-2 py-0.5 rounded-full">SMS Notifications Enabled</span>
          <% } %>
        </div>
      </div>
    </div>
  <% } %>
  
  <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
    <!-- Form Builder Controls -->
    <div class="lg:col-span-1">
      <div class="bg-white rounded-lg shadow-md p-6">
        <h2 class="text-xl font-bold text-primary mb-4">Form Details</h2>
        
        <div class="mb-6">
          <label for="form-name" class="form-label">Form Name</label>
          <input type="text" id="form-name" class="form-input" value="<%= form.name || '' %>" placeholder="Contact Form">
        </div>
        
        <div class="mb-6">
          <label for="allowed-domains" class="form-label">Allowed Domains</label>
          <input type="text" id="allowed-domains" class="form-input" value="<%= form.domains ? form.domains.join(', ') : '' %>" placeholder="example.com, subdomain.example.org">
          <p class="mt-1 text-xs text-gray-500">Leave empty to allow all domains, or specify comma-separated domains</p>
        </div>
        
        <div class="mb-6">
          <label for="notification-emails" class="form-label">Additional Notification Emails</label>
          <input type="text" id="notification-emails" class="form-input" value="<%= form.notificationEmails ? form.notificationEmails.join(', ') : '' %>" placeholder="email1@example.com, email2@example.com">
          <p class="mt-1 text-xs text-gray-500">Comma-separated list of additional email addresses to receive form notifications</p>
        </div>
        
        <h3 class="text-lg font-bold text-primary mb-3 mt-8">Add Fields</h3>
        <div class="space-y-2">
          <button data-type="text" class="add-field-btn btn-outline w-full justify-center mb-2">
            Text Field
          </button>
          <button data-type="email" class="add-field-btn btn-outline w-full justify-center mb-2">
            Email Field
          </button>
          <button data-type="textarea" class="add-field-btn btn-outline w-full justify-center mb-2">
            Text Area
          </button>
          <button data-type="select" class="add-field-btn btn-outline w-full justify-center mb-2">
            Dropdown
          </button>
          <button data-type="checkbox" class="add-field-btn btn-outline w-full justify-center mb-2">
            Checkbox
          </button>
          <button data-type="radio" class="add-field-btn btn-outline w-full justify-center mb-2">
            Radio Buttons
          </button>
          <button data-type="captcha" class="add-field-btn btn-outline w-full justify-center mb-2">
            Simple CAPTCHA
          </button>
        </div>
        
        <div class="mt-8">
          <button id="save-form-btn" class="btn-primary w-full">Save Form</button>
        </div>
      </div>
    </div>
    
    <!-- Form Preview -->
    <div class="lg:col-span-2">
      <div class="bg-white rounded-lg shadow-md p-6">
        <h2 class="text-xl font-bold text-primary mb-4">Form Preview</h2>
        
        <div id="form-preview" class="border border-gray-200 rounded-lg p-6 min-h-[400px]">
          <div id="form-fields" class="space-y-4">
            <!-- Fields will be added here dynamically -->
            <% if (form.fields && form.fields.length > 0) { %>
              <!-- Fields will be loaded by JavaScript -->
            <% } else { %>
              <div class="text-center py-10 text-gray-500">
                Add fields from the panel on the left to build your form
              </div>
            <% } %>
          </div>
          
          <div class="mt-6">
            <button type="button" class="btn-primary w-full">Submit</button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Field Settings Modal -->
<div id="field-settings-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
  <div class="bg-white rounded-lg max-w-lg w-full p-6">
    <div class="flex justify-between items-center mb-4">
      <h3 class="text-xl font-bold text-primary">Field Settings</h3>
      <button id="close-field-settings" class="text-gray-500 hover:text-gray-800">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>
    
    <div id="field-settings-content" class="space-y-4">
      <!-- Will be populated dynamically -->
    </div>
    
    <div class="flex justify-end space-x-4 mt-6">
      <button id="delete-field-btn" class="text-white bg-red-500 hover:bg-red-600 py-2 px-4 rounded transition-colors">Delete Field</button>
      <button id="save-field-settings" class="btn-primary">Save Changes</button>
    </div>
  </div>
</div>

<% /* Define scripts to be included in the layout */ %>
<% scripts = `
<script>
  // Form builder functionality
  const formFields = [];
  let selectedFieldIndex = -1;
  
  // Initialize form with existing fields if editing
  const formData = ${JSON.stringify(form)};
  
  if (formData.fields && formData.fields.length > 0) {
    formData.fields.forEach(field => {
      formFields.push(field);
    });
    renderFormFields();
  }
  
  // Add field button handlers
  document.querySelectorAll('.add-field-btn').forEach(button => {
    button.addEventListener('click', function() {
      const fieldType = this.dataset.type;
      
      const newField = {
        id: generateId(),
        type: fieldType,
        label: getDefaultLabelForType(fieldType),
        name: getDefaultNameForType(fieldType),
        placeholder: '',
        required: false,
        options: fieldType === 'select' || fieldType === 'radio' ? ['Option 1', 'Option 2'] : []
      };
      
      // For CAPTCHA fields, add specific properties
      if (fieldType === 'captcha') {
        newField.difficulty = 'easy'; // easy, medium, hard
        newField.mathOnly = true; // true for math, false for math + text
        newField.enableAudio = true; // enable audio version for accessibility
      }
      
      formFields.push(newField);
      renderFormFields();
      openFieldSettings(formFields.length - 1);
    });
  });
  
  // Save form
  document.getElementById('save-form-btn').addEventListener('click', async function() {
    const formName = document.getElementById('form-name').value.trim();
    const allowedDomains = document.getElementById('allowed-domains').value.trim();
    const notificationEmails = document.getElementById('notification-emails').value.trim();
    
    if (!formName) {
      alert('Please enter a form name');
      return;
    }
    
    if (formFields.length === 0) {
      alert('Please add at least one field to your form');
      return;
    }
    
    try {
      const response = await fetch('/form/save', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          id: formData.id || '',
          name: formName,
          fields: JSON.stringify(formFields),
          domains: allowedDomains,
          notificationEmails: notificationEmails
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        window.location.href = result.redirect || '/dashboard';
      } else {
        alert('Failed to save form: ' + result.message);
      }
    } catch (error) {
      console.error('Error saving form:', error);
      alert('An error occurred while saving the form.');
    }
  });
  
  // Field settings modal functionality
  const fieldSettingsModal = document.getElementById('field-settings-modal');
  const fieldSettingsContent = document.getElementById('field-settings-content');
  const closeFieldSettings = document.getElementById('close-field-settings');
  const saveFieldSettings = document.getElementById('save-field-settings');
  const deleteFieldBtn = document.getElementById('delete-field-btn');
  
  function openFieldSettings(index) {
    selectedFieldIndex = index;
    const field = formFields[index];
    
    // Generate field settings HTML based on field type
    let settingsHTML = \`
      <div>
        <label class="form-label">Field Label</label>
        <input type="text" id="field-label" class="form-input" value="\${field.label}">
      </div>
      <div>
        <label class="form-label">Field Name</label>
        <input type="text" id="field-name" class="form-input" value="\${field.name}">
      </div>
    \`;
    
    // Don't show placeholder for certain field types
    if (field.type !== 'captcha' && field.type !== 'checkbox' && field.type !== 'radio') {
      settingsHTML += \`
        <div>
          <label class="form-label">Placeholder</label>
          <input type="text" id="field-placeholder" class="form-input" value="\${field.placeholder || ''}">
        </div>
      \`;
    }
    
    // Don't show required checkbox for CAPTCHA (always required)
    if (field.type !== 'captcha') {
      settingsHTML += \`
        <div class="flex items-center">
          <input type="checkbox" id="field-required" class="h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded" \${field.required ? 'checked' : ''}>
          <label for="field-required" class="ml-2 block text-sm text-gray-700">Required field</label>
        </div>
      \`;
    } else {
      // CAPTCHA specific settings
      settingsHTML += \`
        <div class="mt-4">
          <label class="form-label">CAPTCHA Difficulty</label>
          <select id="captcha-difficulty" class="form-input">
            <option value="easy" \${field.difficulty === 'easy' ? 'selected' : ''}>Easy (e.g., 2 + 3)</option>
            <option value="medium" \${field.difficulty === 'medium' ? 'selected' : ''}>Medium (e.g., 12 + 15)</option>
            <option value="hard" \${field.difficulty === 'hard' ? 'selected' : ''}>Hard (e.g., 24 + 37)</option>
          </select>
        </div>
        <div class="flex items-center mt-4">
          <input type="checkbox" id="captcha-math-only" class="h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded" \${field.mathOnly ? 'checked' : ''}>
          <label for="captcha-math-only" class="ml-2 block text-sm text-gray-700">Math problems only</label>
        </div>
        <p class="text-xs text-gray-500 mt-1">If unchecked, will also include text-based challenges</p>
        <div class="flex items-center mt-4">
          <input type="checkbox" id="captcha-enable-audio" class="h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded" \${field.enableAudio ? 'checked' : ''}>
          <label for="captcha-enable-audio" class="ml-2 block text-sm text-gray-700">Enable audio CAPTCHA</label>
        </div>
        <p class="text-xs text-gray-500 mt-1">Adds an audio button for accessibility (works with math problems only)</p>
      \`;
    }
    
    // Add options for select, checkbox, or radio fields
    if (field.type === 'select' || field.type === 'radio' || field.type === 'checkbox') {
      settingsHTML += \`
        <div class="mt-4">
          <label class="form-label">Options</label>
          <div id="field-options" class="space-y-2">
      \`;
      
      field.options.forEach((option, i) => {
        settingsHTML += \`
          <div class="flex items-center">
            <input type="text" class="form-input option-value" value="\${option}">
            <button type="button" class="ml-2 text-red-500 remove-option" data-index="\${i}">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
        \`;
      });
      
      settingsHTML += \`
          </div>
          <button type="button" id="add-option" class="mt-2 text-sm text-primary font-medium hover:underline">+ Add Option</button>
        </div>
      \`;
    }
    
    fieldSettingsContent.innerHTML = settingsHTML;
    fieldSettingsModal.classList.remove('hidden');
    
    // Add event listener to add option button
    const addOptionBtn = document.getElementById('add-option');
    if (addOptionBtn) {
      addOptionBtn.addEventListener('click', function() {
        const optionsContainer = document.getElementById('field-options');
        const newOptionIndex = document.querySelectorAll('.option-value').length;
        const optionWrapper = document.createElement('div');
        optionWrapper.className = 'flex items-center';
        optionWrapper.innerHTML = \`
          <input type="text" class="form-input option-value" value="Option \${newOptionIndex + 1}">
          <button type="button" class="ml-2 text-red-500 remove-option" data-index="\${newOptionIndex}">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        \`;
        optionsContainer.appendChild(optionWrapper);
        
        // Add event listener to the new remove button
        optionWrapper.querySelector('.remove-option').addEventListener('click', function() {
          optionWrapper.remove();
        });
      });
    }
    
    // Add event listeners to remove option buttons
    document.querySelectorAll('.remove-option').forEach(button => {
      button.addEventListener('click', function() {
        this.parentElement.remove();
      });
    });
  }
  
  // Close field settings modal
  closeFieldSettings.addEventListener('click', function() {
    fieldSettingsModal.classList.add('hidden');
    selectedFieldIndex = -1;
  });
  
  // Close modal if clicking outside
  fieldSettingsModal.addEventListener('click', function(e) {
    if (e.target === fieldSettingsModal) {
      fieldSettingsModal.classList.add('hidden');
      selectedFieldIndex = -1;
    }
  });
  
  // Save field settings
  saveFieldSettings.addEventListener('click', function() {
    if (selectedFieldIndex >= 0) {
      const field = formFields[selectedFieldIndex];
      field.label = document.getElementById('field-label').value;
      field.name = document.getElementById('field-name').value;
      
      if (field.type !== 'captcha' && field.type !== 'checkbox' && field.type !== 'radio') {
        field.placeholder = document.getElementById('field-placeholder').value;
      }
      
      if (field.type !== 'captcha') {
        field.required = document.getElementById('field-required').checked;
      } else {
        // CAPTCHA is always required
        field.required = true;
        // Save CAPTCHA specific settings
        field.difficulty = document.getElementById('captcha-difficulty').value;
        field.mathOnly = document.getElementById('captcha-math-only').checked;
        field.enableAudio = document.getElementById('captcha-enable-audio').checked;
      }
      
      // Save options for select, checkbox, or radio fields
      if (field.type === 'select' || field.type === 'radio' || field.type === 'checkbox') {
        field.options = Array.from(document.querySelectorAll('.option-value')).map(input => input.value);
      }
      
      renderFormFields();
      fieldSettingsModal.classList.add('hidden');
      selectedFieldIndex = -1;
    }
  });
  
  // Delete field
  deleteFieldBtn.addEventListener('click', function() {
    if (selectedFieldIndex >= 0) {
      formFields.splice(selectedFieldIndex, 1);
      renderFormFields();
      fieldSettingsModal.classList.add('hidden');
      selectedFieldIndex = -1;
    }
  });
  
  // Helper function to render the form fields
  function renderFormFields() {
    const formFieldsContainer = document.getElementById('form-fields');
    formFieldsContainer.innerHTML = '';
    
    if (formFields.length === 0) {
      formFieldsContainer.innerHTML = \`
        <div class="text-center py-10 text-gray-500">
          Add fields from the panel on the left to build your form
        </div>
      \`;
      return;
    }
    
    formFields.forEach((field, index) => {
      const fieldElement = document.createElement('div');
      fieldElement.className = 'field-wrapper border border-gray-200 rounded p-4 hover:border-primary cursor-pointer';
      fieldElement.dataset.index = index;
      
      let fieldHTML = \`
        <label class="form-label \${field.required ? 'font-bold' : ''}">\${field.label}\${field.required ? ' *' : ''}</label>
      \`;
      
      switch (field.type) {
        case 'text':
          fieldHTML += \`<input type="text" class="form-input" placeholder="\${field.placeholder}" \${field.required ? 'required' : ''}>\`;
          break;
        case 'email':
          fieldHTML += \`<input type="email" class="form-input" placeholder="\${field.placeholder}" \${field.required ? 'required' : ''}>\`;
          break;
        case 'textarea':
          fieldHTML += \`<textarea class="form-input" rows="4" placeholder="\${field.placeholder}" \${field.required ? 'required' : ''}></textarea>\`;
          break;
        case 'select':
          fieldHTML += \`<select class="form-input" \${field.required ? 'required' : ''}>\`;
          if (!field.required) {
            fieldHTML += \`<option value="">Please select</option>\`;
          }
          field.options.forEach(option => {
            fieldHTML += \`<option value="\${option}">\${option}</option>\`;
          });
          fieldHTML += \`</select>\`;
          break;
        case 'checkbox':
          field.options.forEach((option, i) => {
            fieldHTML += \`
              <div class="flex items-center mt-2">
                <input type="checkbox" id="\${field.name}_\${i}" name="\${field.name}" value="\${option}" class="h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded">
                <label for="\${field.name}_\${i}" class="ml-2 block text-sm text-gray-700">\${option}</label>
              </div>
            \`;
          });
          break;
        case 'radio':
          field.options.forEach((option, i) => {
            fieldHTML += \`
              <div class="flex items-center mt-2">
                <input type="radio" id="\${field.name}_\${i}" name="\${field.name}" value="\${option}" class="h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded" \${i === 0 && field.required ? 'checked' : ''}>
                <label for="\${field.name}_\${i}" class="ml-2 block text-sm text-gray-700">\${option}</label>
              </div>
            \`;
          });
          break;
        case 'captcha':
          // Show a sample CAPTCHA in the preview
          const captchaExample = getCaptchaExample(field.difficulty);
          fieldHTML += \`
            <div class="bg-gray-100 p-3 rounded mt-2 mb-3">
              <p class="text-sm font-medium">\${captchaExample.question}</p>
              \${field.enableAudio ? \`
                <button type="button" class="mt-2 bg-primary text-white py-1 px-2 rounded text-xs flex items-center" 
                  onclick="previewCaptchaAudio('\${captchaExample.question}', event)">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M11.536 14.01A8.473 8.473 0 0 0 14.026 8a8.473 8.473 0 0 0-2.49-6.01l-.708.707A7.476 7.476 0 0 1 13.025 8c0 2.071-.84 3.946-2.197 5.303l.708.707z"/>
                    <path d="M10.121 12.596A6.48 6.48 0 0 0 12.025 8a6.48 6.48 0 0 0-1.904-4.596l-.707.707A5.483 5.483 0 0 1 11.025 8a5.483 5.483 0 0 1-1.61 3.89l.706.706z"/>
                    <path d="M8.707 11.182A4.486 4.486 0 0 0 10.025 8a4.486 4.486 0 0 0-1.318-3.182L8 5.525A3.489 3.489 0 0 1 9.025 8 3.49 3.49 0 0 1 8 10.475l.707.707z"/>
                    <path d="M6.717 3.55A.5.5 0 0 1 7 4v8a.5.5 0 0 1-.812.39L3.825 10.5H1.5A.5.5 0 0 1 1 10V6a.5.5 0 0 1 .5-.5h2.325l2.363-1.89a.5.5 0 0 1 .529-.06z"/>
                  </svg>
                  Listen
                </button>\` : ''}
            </div>
            <input type="text" class="form-input" placeholder="Enter your answer" required>
            <p class="text-xs text-gray-500 mt-1">This will generate a new challenge for each visitor</p>
          \`;
          break;
      }
      
      fieldElement.innerHTML = fieldHTML;
      formFieldsContainer.appendChild(fieldElement);
      
      // Add click event to open field settings
      fieldElement.addEventListener('click', function() {
        openFieldSettings(parseInt(this.dataset.index));
      });
    });
  }
  
  // Helper functions
  function generateId() {
    return Math.random().toString(36).substring(2, 15);
  }
  
  function getDefaultLabelForType(type) {
    switch (type) {
      case 'text': return 'Text Field';
      case 'email': return 'Email Address';
      case 'textarea': return 'Message';
      case 'select': return 'Select Option';
      case 'checkbox': return 'Checkbox Options';
      case 'radio': return 'Radio Options';
      case 'captcha': return 'Security Check';
      default: return 'Field';
    }
  }
  
  function getDefaultNameForType(type) {
    switch (type) {
      case 'text': return 'text_field';
      case 'email': return 'email';
      case 'textarea': return 'message';
      case 'select': return 'select_option';
      case 'checkbox': return 'checkbox_options';
      case 'radio': return 'radio_options';
      case 'captcha': return 'captcha';
      default: return 'field';
    }
  }
  
  function getCaptchaExample(difficulty) {
    let num1, num2;
    
    switch (difficulty) {
      case 'easy':
        num1 = Math.floor(Math.random() * 5) + 1; // 1-5
        num2 = Math.floor(Math.random() * 5) + 1; // 1-5
        break;
      case 'medium':
        num1 = Math.floor(Math.random() * 20) + 10; // 10-29
        num2 = Math.floor(Math.random() * 20) + 10; // 10-29
        break;
      case 'hard':
      default:
        num1 = Math.floor(Math.random() * 50) + 20; // 20-69
        num2 = Math.floor(Math.random() * 50) + 20; // 20-69
        break;
    }
    
    return {
      question: \`What is \${num1} + \${num2}?\`,
      answer: num1 + num2
    };
  }
  
  // Play audio version of CAPTCHA in the preview
  function previewCaptchaAudio(question, event) {
    event.stopPropagation(); // Prevent event from bubbling up and opening the field settings
    if ('speechSynthesis' in window) {
      const utterance = new SpeechSynthesisUtterance(question);
      utterance.rate = 0.9; // Slightly slower
      window.speechSynthesis.speak(utterance);
    } else {
      alert('Your browser does not support speech synthesis.');
    }
  }
</script>
` %>

<%- scripts %> 