<div>
  <div class="flex justify-between items-center mb-8">
    <h1 class="text-3xl font-bold text-primary">Form Entries: <%= form.name %></h1>
    <a href="/dashboard" class="btn-outline">Back to Dashboard</a>
  </div>
  
  <% if (entries && entries.length > 0) { %>
    <div class="bg-white rounded-lg shadow-md overflow-hidden">
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Date
              </th>
              <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Domain
              </th>
              <% 
                // Get unique field names across all entries
                const allFields = new Set();
                entries.forEach(entry => {
                  Object.keys(entry.data).forEach(key => allFields.add(key));
                });
                const fieldNames = Array.from(allFields);
                
                // Render column headers for each field
                fieldNames.forEach(field => {
              %>
                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  <%= field %>
                </th>
              <% }); %>
              <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                Actions
              </th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200">
            <% entries.forEach(entry => { %>
              <tr>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  <%= new Date(entry.createdAt).toLocaleString() %>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  <%= entry.domain %>
                </td>
                <% 
                  // Render each field value
                  fieldNames.forEach(field => {
                    const value = entry.data[field] || '-';
                    const displayValue = Array.isArray(value) ? value.join(', ') : value;
                %>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    <%= displayValue %>
                  </td>
                <% }); %>
                <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                  <button 
                    class="view-entry-btn text-primary hover:text-primary-dark" 
                    data-entry-id="<%= entry.id %>"
                    data-entry-date="<%= new Date(entry.createdAt).toLocaleString() %>"
                    data-entry-domain="<%= entry.domain %>"
                    data-entry-data="<%= encodeURIComponent(JSON.stringify(entry.data)) %>">
                    View Details
                  </button>
                </td>
              </tr>
            <% }); %>
          </tbody>
        </table>
      </div>
    </div>
  <% } else { %>
    <div class="bg-white rounded-lg shadow-md p-8 text-center">
      <div class="flex flex-col items-center">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4" />
        </svg>
        <h3 class="text-xl font-medium text-gray-900 mb-2">No form entries yet</h3>
        <p class="text-gray-600 mb-6">Once your form starts receiving submissions, they will appear here.</p>
        <a href="/form/embed/<%= form.id %>" class="btn-accent">Get Embed Code</a>
      </div>
    </div>
  <% } %>

  <!-- Export Buttons -->
  <% if (entries && entries.length > 0) { %>
    <div class="mt-6 flex justify-end space-x-4">
      <button id="export-csv-btn" class="btn-outline flex items-center">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
        </svg>
        Export as CSV
      </button>
    </div>
  <% } %>
</div>

<!-- Entry Details Modal -->
<div id="entry-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
  <div class="bg-white rounded-lg max-w-lg w-full p-6">
    <div class="flex justify-between items-center mb-4">
      <h3 class="text-xl font-bold text-primary">Entry Details</h3>
      <button id="close-entry-modal" class="text-gray-500 hover:text-gray-800">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>
    
    <div class="mb-4">
      <p class="text-sm text-gray-500" id="entry-date-display"></p>
      <p class="text-sm text-gray-500" id="entry-domain-display"></p>
    </div>
    
    <div id="entry-data" class="space-y-4 max-h-96 overflow-y-auto">
      <!-- Will be populated dynamically -->
    </div>
    
    <div class="mt-6 flex justify-end">
      <button id="close-entry-btn" class="btn-primary">Close</button>
    </div>
  </div>
</div>

<% const scripts = `
<script>
  // View entry details functionality
  const viewButtons = document.querySelectorAll('.view-entry-btn');
  const entryModal = document.getElementById('entry-modal');
  const closeEntryModal = document.getElementById('close-entry-modal');
  const closeEntryBtn = document.getElementById('close-entry-btn');
  const entryDateDisplay = document.getElementById('entry-date-display');
  const entryDomainDisplay = document.getElementById('entry-domain-display');
  const entryDataContainer = document.getElementById('entry-data');
  
  viewButtons.forEach(button => {
    button.addEventListener('click', function() {
      const entryId = this.dataset.entryId;
      const entryDate = this.dataset.entryDate;
      const entryDomain = this.dataset.entryDomain;
      const entryData = JSON.parse(decodeURIComponent(this.dataset.entryData));
      
      entryDateDisplay.textContent = 'Submitted: ' + entryDate;
      entryDomainDisplay.textContent = 'From: ' + entryDomain;
      
      // Display entry data
      entryDataContainer.innerHTML = '';
      
      Object.entries(entryData).forEach(([key, value]) => {
        const row = document.createElement('div');
        
        let displayValue = value;
        if (Array.isArray(value)) {
          displayValue = value.join(', ');
        }
        
        row.innerHTML = \`
          <div class="border-b border-gray-200 pb-3">
            <h4 class="text-sm font-bold text-gray-700">\${key}</h4>
            <p class="text-gray-800">\${displayValue}</p>
          </div>
        \`;
        
        entryDataContainer.appendChild(row);
      });
      
      entryModal.classList.remove('hidden');
    });
  });
  
  // Close modal
  closeEntryModal.addEventListener('click', function() {
    entryModal.classList.add('hidden');
  });
  
  closeEntryBtn.addEventListener('click', function() {
    entryModal.classList.add('hidden');
  });
  
  // Close modal if clicking outside
  entryModal.addEventListener('click', function(e) {
    if (e.target === entryModal) {
      entryModal.classList.add('hidden');
    }
  });
  
  // Export functionality
  const exportCsvBtn = document.getElementById('export-csv-btn');
  
  if (exportCsvBtn) {
    exportCsvBtn.addEventListener('click', function() {
      // Get all entries data from table
      const table = document.querySelector('table');
      const headers = Array.from(table.querySelectorAll('thead th')).map(th => th.textContent.trim());
      const rows = Array.from(table.querySelectorAll('tbody tr'));
      
      // Remove the "Actions" column
      headers.pop();
      
      let csvContent = headers.join(',') + '\\n';
      
      rows.forEach(row => {
        const cells = Array.from(row.querySelectorAll('td'));
        cells.pop(); // Remove the actions cell
        
        const rowData = cells.map(cell => {
          let content = cell.textContent.trim();
          // Escape commas and quotes in values
          if (content.includes(',') || content.includes('"') || content.includes('\\n')) {
            content = '"' + content.replace(/"/g, '""') + '"';
          }
          return content;
        });
        
        csvContent += rowData.join(',') + '\\n';
      });
      
      // Create download link
      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.setAttribute('href', url);
      link.setAttribute('download', 'form_entries_\${new Date().toISOString().split('T')[0]}.csv');
      link.style.display = 'none';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    });
  }
</script>
` %>

<%- scripts %> 